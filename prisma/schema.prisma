enum PlatformType {
  GITHUB
  FRONTEND_MENTOR
  TWITTER
  LINKEDIN
  YOUTUBE
  FACEBOOK
  TWITCH
  CODEWARS
  FREECODECAMP
  GITLAB
  HASHNODE
  STACK_OVERFLOW
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  contactEmail  String?
  username      String?         @unique
  email         String?         @unique
  uniqueLinkId    String          @unique @default(cuid())
  emailVerified DateTime?
  image         String?         @default("https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/Windows_10_Default_Profile_Picture.svg/2048px-Windows_10_Default_Profile_Picture.svg.png")
  platforms     Platform[]      @relation("userPlatforms")
  Session       Session[]
  Account       Account?
// Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Platform {
  id        String       @id @default(cuid())
  type      PlatformType // Enum representing the platform type
  link      String // Link to the user's profile on the platform
  index     Int?
  user      User         @relation("userPlatforms", fields: [userId], references: [id], onDelete: Cascade)
  userId    String // Foreign key to the User model
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
